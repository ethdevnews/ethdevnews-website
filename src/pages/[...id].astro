---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import IssueNavigation from "@components/IssueNavigation.astro";

export async function getStaticPaths() {
  const issues = (await getCollection("issues"))
    .filter((issue) => !issue.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return issues.map((issue) => ({
    params: { id: issue.id.replace(/\.md$/, "") },
    props: issue,
  }));
}
type Props = CollectionEntry<"issues">;

const issues = (await getCollection("issues"))
  .filter((issue) => !issue.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextIssue() {
  let issueIndex;
  for (const issue of issues) {
    if (issue.id.replace(/\.md$/, "") === Astro.params.id) {
      issueIndex = issues.indexOf(issue);
      return issues[issueIndex + 1];
    }
  }
}

function getPrevIssue() {
  let issueIndex;
  for (const issue of issues) {
    if (issue.id.replace(/\.md$/, "") === Astro.params.id) {
      issueIndex = issues.indexOf(issue);
      return issues[issueIndex - 1];
    }
  }
}

const nextIssue = getNextIssue();
const prevIssue = getPrevIssue();

const issue = Astro.props;
const { Content } = await render(issue);
---

<Layout title={issue.data.title} description={issue.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/archive">Back to archive </BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {issue.data.title}
      </h1>
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={issue.data.date} />
        </div>
        &bull;
        {issue.body && (
          <div class="font-base text-sm">
            {readingTime(issue.body)}
          </div>
        )}        
      </div>
    </div>
    <article class="animate">
      <Content />
      <div class="mt-24">
        <IssueNavigation prevIssue={prevIssue} nextIssue={nextIssue} />
      </div>
    </article>
  </Container>
</Layout>
